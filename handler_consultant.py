from aiogram.types import Message
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from consultant_ai import save_profile, generate_answer_dialog_search
from consultant_ai import load_profile, ProjectContext
from promt import prompt_for_GPT_DS_5
from keyboards_consultant import kb_consultant
from aiogram.fsm.state import State, StatesGroup
import logging
import os
from openai import OpenAIError, AsyncOpenAI, OpenAI
from dotenv import load_dotenv
from utils_voice import handle_voice_message, send_long_message
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Consultant_State(StatesGroup):
    choosing_option = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
    active_dialog = State()  # –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º

router = Router()

# –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ–µ–∫—Ç–µ
default_user_info = {"type_user": "", "contact": ""}
default_project_info = {
    "type": "",
    "goal": "",
    "current_stage": "",
    "completed_stages": [],
    "remaining_tasks": [],
    "plan": "",
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
context = load_profile()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
AUDIO_DIR = './audio'

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')
openai_key = os.getenv('OPENAI_API_KEY')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /consultant
@router.message(Command('consultant'))
async def cmd_consultant_options(message: Message, state: FSMContext):
    await state.clear()
    """–•–µ–Ω–¥–ª–µ—Ä –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # context = ProjectContext(default_user_info, default_project_info)
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    context = load_profile()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(context=context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM

    await message.answer(
        "üõ†Ô∏è –í—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ AI. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=await kb_consultant(),
    )
    await state.set_state(Consultant_State.choosing_option)



# –•–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
@router.message(Consultant_State.choosing_option, ((F.text == "ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI")) & ~F.text.startswith('/'))
async def ask_question_gpt(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É AI. –ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'active_dialog'.")
    await state.set_state(Consultant_State.active_dialog)
    await message.answer(
        "üì¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    )



@router.message(Consultant_State.active_dialog, (F.text =="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI)"))
async def ask_question_gpt_clear(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI). –ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'active_dialog'.")

    """–£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists("profile.json") and os.path.exists("dialog_history.txt"):
        try:
            os.remove("profile.json")
            os.remove("dialog_history.txt")
            print("–ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = ProjectContext(default_user_info, default_project_info)
            await state.update_data(context=context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM

            await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (AI) –æ—á–∏—â–µ–Ω–∞. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=None)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞ (AI). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–∏ÃÜ—Ç–µ —Å–≤–æ–∏ÃÜ –≤–æ–ø—Ä–æ—Å.")
        # await state.clear()
        # await state.set_state(Consultant_State.active_dialog)


    await state.set_state(Consultant_State.active_dialog)
    await message.answer(
        "üì¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI)"
@router.message(Consultant_State.choosing_option, F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI)")
async def clear_history_ai(message: Message, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    """–£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists("profile.json") and os.path.exists("dialog_history.txt"):
        try:
            os.remove("profile.json")
            os.remove("dialog_history.txt")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI).")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = ProjectContext(default_user_info, default_project_info)
            await state.update_data(context=context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM
            await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (AI) –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=await kb_consultant())

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    else:

        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞ (AI). –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=await kb_consultant())
        # await state.clear()
        # await state.set_state(Consultant_State.active_dialog)



@router.message(
    Consultant_State.active_dialog,
    (F.text & ~F.text.startswith('/') & (F.text != "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (AI)")) | F.voice
)
async def handler_text_or_voice_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""
    data = await state.get_data()
    context: ProjectContext = data.get("context")  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_question = ""

    if message.text:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_question = message.text.strip().lower()
        # await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {user_question}")  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    elif message.voice:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        transcription = await handle_voice_message(message, bot)

        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        if transcription:
            user_question = transcription.strip().lower()
            await message.answer(f"–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_question}")
        else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    if user_question == "stop":
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")
        save_profile(context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.clear()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if not user_question:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
    try:
        answer, used_tokens, cost = generate_answer_dialog_search(
            prompt_for_GPT_DS_5, user_question, context
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.total_tokens += used_tokens
        context.total_cost += cost
        context.update(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {answer}\n")

        # # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è MarkdownV2
        # escaped_answer = escape_markdown(answer)
        #
        # if len(escaped_answer) < 4096:
        #     await message.answer(escaped_answer, parse_mode="MarkdownV2")
        # else:
        #     # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        #     max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        #     for i in range(0, len(escaped_answer), max_length):
        #         await message.answer(escaped_answer[i:i + max_length], parse_mode="MarkdownV2")
        #         await asyncio.sleep(1)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils_voice –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await send_long_message(message, bot, answer)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        log_message = (
            f"üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {used_tokens}, –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.5f}\n"
            f"üîπ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {context.total_tokens}, –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${context.total_cost:.5f}"
        )
        await message.answer(log_message)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        save_profile(context)
        context.save_dialog_history()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.")
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



