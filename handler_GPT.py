from aiogram.types import Message
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from openai import AsyncOpenAI
from collections import deque
import os
from dotenv import load_dotenv
from keyboards_gpt import kb_gpt
import logging
from utils_voice import handle_voice_message


load_dotenv()

class GPT_State(StatesGroup):
    choosing_option = State()
    awaiting_question = State()

router = Router()

chat_history = {}
user_temps = {}

try:
    os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')
    client = AsyncOpenAI()
    print("OpenAI API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
AUDIO_DIR = "audio_files"

@router.message(Command('gpt'))
async def cmd_gpt_options(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(GPT_State.choosing_option)
    await message.answer(
        "üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=await kb_gpt()

    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìö –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT"
@router.message(GPT_State.choosing_option, (F.text == "üìö –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT"))
async def ask_question_gpt(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT'. –ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'awaiting_question'.")
    await state.clear()
    await state.set_state(GPT_State.awaiting_question)
    await message.answer(
        "üì¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (GPT)"
@router.message(GPT_State.choosing_option, F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (GPT)")
async def clear_history_gpt(message: Message, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if user_id in chat_history:
        chat_history[user_id].clear()
        await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=await kb_gpt())
    else:
        # await state.set_state(GPT_State.choosing_option)
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–∞. –í—ã–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—é.", reply_markup=await kb_gpt())

    await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(GPT_State.awaiting_question, ~F.text.startswith('/') & ~(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (GPT)") | F.voice)
async def handle_text_or_voice_message(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    user_question = ""

    if message.text:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_question = message.text.strip()

        if len(user_question) > 2000:
            await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    elif message.voice:  # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            user_question = await handle_voice_message(message, bot)
            if not user_question:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            await message.answer(f"–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_question}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

    await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    if user_id not in chat_history:
        chat_history[user_id] = deque(maxlen=10)

    chat_history[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        temperature = user_temps.get(user_id, 0.1)
        full_history = "\n".join(chat_history[user_id])
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."},
                {"role": "user", "content": full_history},
            ],
            temperature=temperature,
        )
        answer = response.choices[0].message.content
        chat_history[user_id].append(f"GPT: {answer}")
        await message.answer(answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI: {e}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



