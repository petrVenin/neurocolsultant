from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging
from handler_GPT import cmd_gpt_options
from handler_consultant import cmd_consultant_options
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards_main import kb_main


class main_State(StatesGroup):
    choosing_option = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏


router = Router()

#
# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# async def kb_main():
#     builder = ReplyKeyboardBuilder()
#     buttons = [
#         "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI",
#         "GPT —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
#         "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"
#     ]
#     for button in buttons:
#         builder.button(text=button)
#     builder.adjust(3)
#     return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=await kb_main()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    )
    await state.set_state(main_State.choosing_option)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command('start'))
async def cmd_main_options(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é.")
    await message.answer("üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=await kb_main())
    await state.set_state(main_State.choosing_option)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
@router.message(main_State.choosing_option)
async def handle_main_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    # –ü–µ—á–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")

    user_choice = message.text

    # –í—ã–±–æ—Ä "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI"
    if user_choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI":
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º: –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI.")
        # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        await cmd_consultant_options(message, state)

    # –í—ã–±–æ—Ä "GPT —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º"
    elif user_choice == "GPT —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º":
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º: GPT —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º.")
        # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º GPT
        await cmd_gpt_options(message, state)

    # –í—ã–±–æ—Ä "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç"
    elif user_choice == "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç":
        await message.answer("ü§ñ –ë–æ—Ç —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–∞—Ö:\n1Ô∏è‚É£ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ AI\n2Ô∏è‚É£ GPT —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º.",
                             reply_markup=await kb_main())

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä
    else:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {user_choice}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ –º–µ–Ω—é.", reply_markup=await kb_main())
